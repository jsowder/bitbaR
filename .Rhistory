\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
stringr::str_replace_all("\n")
}
bbPopup()
bbPopup <- function(
query = "Input Below."
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog
\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
stringr::str_remove_all("\n")
}
bbPopup()
bbPopup <- function(
query = "Input Below."
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog
\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
stringr::str_remove_all("\n") %>%
toString()
}
bbPopup()
bbPopup <- function(
query = "Input Below."
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog
\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
stringr::str_remove_all("\n") %>%
print()
}
bbPopup()
bbPopup <- function(
query = "Input Below."
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog
\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
stringr::str_remove_all("\\n")
}
bbPopup()
bbPopup <- function(
query = "Input Below."
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog
\"Query?\" buttons {{\"{button2}\", \"{button1}\"}}
default button \"{button1}\" default answer \"{default_answer}\")'"
) %>%
system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\",
buttons {{\"{button2}\", \"{button1}\"}}",
"default button \"{button1}\"",
"default answer \"{default_answer}\")'"
) %>%
system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\",
buttons {{\"{button2}\", \"{button1}\"}}",
"default button \"{button1}\"",
"default answer \"{default_answer}\")'"
) %>%
system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\",
buttons {{\"{button2}\", \"{button1}\"}}",
"default button \"{button1}\"",
"default answer \"{default_answer}\")'"
) #%>%
# system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\"",
"buttons {{\"{button2}\", \"{button1}\"}}",
"default button \"{button1}\"",
"default answer \"{default_answer}\")'"
) #%>%
# system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\" ",
"buttons {{\"{button2}\", \"{button1}\"}} ",
"default button \"{button1}\" ",
"default answer \"{default_answer}\")'"
) #%>%
# system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,input = TRUE
,default_answer = ""
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\""
, " buttons {{\"{button2}\", \"{button1}\"}}"
, " default button \"{button1}\""
, " default answer \"{default_answer}\")'"
) %>%
system(intern = TRUE)
}
bbPopup()
bbPopup <- function(
query = "Input?"
,button1 = "Submit"
,button2 = "Cancel"
,default_answer = "Paste here"
){
# Thanks: https://apple.stackexchange.com/questions/239764/how-can-i-run-a-shell-script-that-prompts-for-user-input-from-within-applescript
stringr::str_glue(
"osascript -e 'set T to text returned of (display dialog \"{query}\""
, " buttons {{\"{button2}\", \"{button1}\"}}"
, " default button \"{button1}\""
, " default answer \"{default_answer}\")'"
) %>%
system(intern = TRUE)
}
bbPopup()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
bbPopup()
bbPopup("this\n\n and \n\n this")
bbPopup("this \n\nand \n\nthis")
bbPopup("this
and
this")
bbPopup(
"this
and
this")
bbPopup(
"this
and's
this")
bbPopup(
"this
and\'s
this")
bbPopup(
"this
and\\'s
this")
bbPopup(
"this
and\\'s
this")
bbPopup(
"this
and\'s
this")
bbPopup(
"this
and\\\'s
this")
bbPopup(
"this
and's
this")
bbPopup(
"this
and\\'s
this")
bbPopup(
"this
and\\\\\'s
this")
bbPopup(
"this
and\\\\'s
this")
bbPopup(
"this
and\\\\\\'s
this")
?"'"
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
iris
roxygen2::roxygenise()
devtools::use_package() # Puts packages in DESCRIPTION
warning("All quotations (\', \", \``) are removed from the query.")
print(
"
this and
this and
"
)
cat(
"
this and
this and
"
)
cat(
strwrap("
this
and that
")
strwrap("
this
and that
")
strwrap(
"Here
is a string
with multiple
lines"
)
strwrap(
"Here
is a string
with multiple
lines"
)
strwrap("Here
is a string
with multiple
lines"
strwrap("Here
is a string
with multiple
lines"
strwrap("what")
stringr::str_wrap(
"Here is a
very long string
with multiple lines"
)
stringr::str_wrap(
"Here is a
very long string
with multiple lines.
Also, another line."
)
stringr::str_wrap(
"Here is a
very long string\\
with multiple lines.
Also, another line."
)
stringr::str_wrap(
"Here is a
very long string//
with multiple lines.
Also, another line."
)
strwrap("this
is a very long
line of text")
mtcars
#' Makes and opens a new script with the BitBar template.
#'
#' Also runs the command to make the new script executable by BitBar.
#'
#' @param name Name of your menu. Isn't used by BitBar so mostly irrelevant. No periods.
#' @param refreshRate How often would you like the menu to refresh. Format is
#' 10s, 5m, 1h, etc. Defaults to 1h.
#' @param dir Where to save the script. Defaults to your working directory.
#'
#' @export
#' @examples
#' bb_new("MyMenu")
#' bb_new("MyMenu", "5s", "path/to/my/BitBar/directory")
bb_new <- function(
name = "myBitBaR",
refresh.rate = "1h",
dir = getwd()
){
name <-
name %>%
str_remove_all("\\.")
template <- "#!/usr/local/bin/Rscript
# Check that the path above is correct to make this path usable by BitBar:
# In Terminal type 'which Rscript'. If the result is different than the path above, replace.
# e.g. you might change it to #!/usr/bin/Rscript or #!/foo/bar/etc/Rscript
# BitBar Metadata ----
# Only needed if you want to share your menu item on BitBar's website. Feel free to delete.
# <bitbar.title>TITLE</bitbar.title>
# <bitbar.version>v1.0</bitbar.version>
# <bitbar.author>YOUR NAME</bitbar.author>
# <bitbar.author.github>YOUR GITHUB USERNAME</bitbar.author.github>
# <bitbar.desc>DESCRIPTION</bitbar.desc>
# <bitbar.image>IMAGE URL</bitbar.image>
# <bitbar.dependencies>R</bitbar.dependencies>
# BitBar Initialize ----
options(tidyverse.quiet = TRUE) # This keeps BitBar from printing out the standard Tidyverse output.
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(bitbaR)
# BitBar!
bb_head() # Loads an icon and Refresh button for your BitBar.
bb_print(\"I am a menu line!\")
bb_print(\"I am red!\", bb_attributes(color = \"red\"))
bb_print(\"I am Google.\", bb_attributes(URL = \"https://www.google.com/\"))
bb_print(\"---\") # Makes a section line.
bb_print(\"mtcars\")
bb_nest(mtcars, cyl, mpg) # Creates a submenu based on a table.
"
BitBarFile <-
file.path(
dir
,paste0(
name
,"."
,refresh.rate
,".R"
)
)
if(!file.exists(BitBarFile)){
file.create(BitBarFile)
con = file(BitBarFile)
writeLines(
con = con,
text = template)
close(con)
}
executable_command <- paste0("chmod +x '", BitBarFile ,"'")
system(executable_command)
file.edit(BitBarFile)
}
bb_new()
#' Makes and opens a new script with the BitBar template.
#'
#' Also runs the command to make the new script executable by BitBar.
#'
#' @param name Name of your menu. Isn't used by BitBar so mostly irrelevant. No periods.
#' @param refreshRate How often would you like the menu to refresh. Format is
#' 10s, 5m, 1h, etc. Defaults to 1h.
#' @param dir Where to save the script. Defaults to your working directory.
#'
#' @export
#' @examples
#' bb_new("MyMenu")
#' bb_new("MyMenu", "5s", "path/to/my/BitBar/directory")
bb_new <- function(
name = "myBitBaR",
refresh.rate = "1h",
dir = getwd()
){
name <-
name %>%
stringr::str_remove_all("\\.")
template <- "#!/usr/local/bin/Rscript
# Check that the path above is correct to make this path usable by BitBar:
# In Terminal type 'which Rscript'. If the result is different than the path above, replace.
# e.g. you might change it to #!/usr/bin/Rscript or #!/foo/bar/etc/Rscript
# BitBar Metadata ----
# Only needed if you want to share your menu item on BitBar's website. Feel free to delete.
# <bitbar.title>TITLE</bitbar.title>
# <bitbar.version>v1.0</bitbar.version>
# <bitbar.author>YOUR NAME</bitbar.author>
# <bitbar.author.github>YOUR GITHUB USERNAME</bitbar.author.github>
# <bitbar.desc>DESCRIPTION</bitbar.desc>
# <bitbar.image>IMAGE URL</bitbar.image>
# <bitbar.dependencies>R</bitbar.dependencies>
# BitBar Initialize ----
options(tidyverse.quiet = TRUE) # This keeps BitBar from printing out the standard Tidyverse output.
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(bitbaR)
# BitBar!
bb_head() # Loads an icon and Refresh button for your BitBar.
bb_print(\"I am a menu line!\")
bb_print(\"I am red!\", bb_attributes(color = \"red\"))
bb_print(\"I am Google.\", bb_attributes(URL = \"https://www.google.com/\"))
bb_print(\"---\") # Makes a section line.
bb_print(\"mtcars\")
bb_nest(mtcars, cyl, mpg) # Creates a submenu based on a table.
"
BitBarFile <-
file.path(
dir
,paste0(
name
,"."
,refresh.rate
,".R"
)
)
if(!file.exists(BitBarFile)){
file.create(BitBarFile)
con = file(BitBarFile)
writeLines(
con = con,
text = template)
close(con)
}
executable_command <- paste0("chmod +x '", BitBarFile ,"'")
system(executable_command)
file.edit(BitBarFile)
}
bb_new()
bb_head() # Loads an icon and Refresh button for your BitBar.
bb_print("I am a menu line!")
bb_print("I am red!", bb_attributes(color = "red"))
bb_print("I am Google.", bb_attributes(URL = "https://www.google.com/"))
bb_print("---") # Makes a section line.
bb_print("mtcars")
bb_nest(mtcars, cyl, mpg) # Creates a submenu based on a table.
library(bitbaR)
# BitBar! ----
bb_head() # Loads an icon and Refresh button for your BitBar.
bb_print("I am a menu line!")
bb_print("I am red!", bb_attributes(color = "red"))
bb_print("I am Google.", bb_attributes(URL = "https://www.google.com/"))
bb_print("---") # Makes a section line.
bb_print("mtcars")
bb_nest(mtcars, cyl, mpg) # Creates a submenu based on a table.
options(tidyverse.quiet = TRUE) # This keeps BitBar from printing out the standard Tidyverse output.
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(bitbaR)
bb_head() # Loads an icon and Refresh button for your BitBar.
bb_print("I am a menu line!")
bb_print("I am red!", bb_attributes(color = "red"))
bb_print("I am Google.", bb_attributes(URL = "https://www.google.com/"))
bb_print("---") # Makes a section line.
bb_print("mtcars")
bb_nest(mtcars, cyl, mpg) # Creates a submenu based on a table.
devtools::use_package("dplyr", "stringr", "rlang") # Puts packages in DESCRIPTION
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
